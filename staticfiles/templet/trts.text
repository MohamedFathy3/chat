

def chatloop(request, slug):
    room = get_object_or_404(Room, slug=slug)
    emojis = Emoji.objects.all()  # جلب جميع الرموز التعبيرية
    style = None
    if request.user.is_authenticated:
        try:
            # الحصول على كائن Customer المرتبط بـ User الحالي
            customer = request.user.customer  # هذا يفترض أنك أنشأت علاقة OneToOne بين User و Customer
            style = Style.objects.get(customer=customer)  # جلب النمط المرتبط بهذا المستخدم
        except Style.DoesNotExist:
            redirect('login')
    # جلب جميع الرسائل الخاصة بالغرفة مرتبة
    messages = Message.objects.filter(room=room).order_by('-created_at')[:10]  # جلب أحدث 10 رسائل فقط
    
    # تحقق إذا كان المستخدم زائرًا
    guest = None
    if request.session.get('guest_id'):
        guest = Guest.objects.get(id=request.session['guest_id'])

    # تحقق إذا كان المستخدم عضوًا
    customer = None
    if request.user.is_authenticated:
        customer = Customer.objects.get(user=request.user)

    # إضافة رسالة جديدة
    if request.method == 'POST':
        content = request.POST.get('content')
        image = request.FILES.get('image')
        emoji_id = request.POST.get('emoji', '')  # الحصول على الـ ID للرمز التعبيري

        # الحصول على الكائن Emoji من قاعدة البيانات باستخدام الـ ID
        emoji = None
        if emoji_id:
            emoji = Emoji.objects.get(id=emoji_id)

        # إذا كان المستخدم عضوًا مسجلًا
        if request.user.is_authenticated:  
            customer = Customer.objects.get(user=request.user)
            message = Message.objects.create(
                room=room,
                customer=customer,
                content=content,
                image=image,
                emoji=emoji
            )
        # إذا كان المستخدم زائرًا
        elif request.session.get('guest_id'):  
            guest = Guest.objects.get(id=request.session.get('guest_id'))
            message = Message.objects.create(
                room=room,
                guest=guest,
                content=content,
                image=image,
                emoji=emoji
            )
        
        return redirect('chatloop', slug=slug)

    # جلب الأعضاء والزوار في الغرفة
    members = room.customers.all()
    guests = room.guests.all()

    return render(request, 'chatloop.html', {
        'room': room, 
        'members': members, 
        'guests': guests,
        'guest': guest, 
        'customer': customer,
        'messages': messages,
        'emojis': emojis,  # تم إرسال الرموز التعبيرية إلى القالب
        'style': style,  # تمرير النمط إلى القالب

    })


def load_new_messages(request, slug):
    room = get_object_or_404(Room, slug=slug)

    # جلب الرسائل الجديدة فقط
    messages = Message.objects.filter(room=room).order_by('-created_at')[:10]  # جلب أحدث 10 رسائل

    # تحضير الرسائل لعرضها في الـ JSON
    messages_data = []
    for message in messages:
        message_data = {
            'content': message.content,
            'sender': message.customer.user.username if message.customer else message.guest.name,
            'is_customer': True if message.customer else False,
            'image': message.image.url if message.image else None,
            'emoji': message.emoji,
            'created_at': message.created_at.strftime('%Y-%m-%d %H:%M:%S')
        }
        messages_data.append(message_data)

    return JsonResponse({'messages': messages_data})


def load_messages(request, slug):
    room = get_object_or_404(Room, slug=slug)
    messages = Message.objects.filter(room=room).order_by('-created_at')[:10]

    # إنشاء قائمة للرسائل
    messages_data = []
    for message in messages:
        messages_data.append({
            'sender': message.customer.user.username if message.customer else message.guest.name,
            'content': message.content,
            'image': message.image.url if message.image else None,
            'emoji': message.emoji.symbol if message.emoji else None,
            'created_at': message.created_at.strftime('%Y-%m-%d %H:%M:%S'),
            'is_customer': bool(message.customer),
        })

    return JsonResponse({'messages': messages_data})




# الخروج من الغرفة للزوار
def guest_logout(request, slug):
    if request.session.get('guest_id'):
        guest = Guest.objects.get(id=request.session['guest_id'])
        room = guest.room
        guest.delete()  # حذف الزائر عند الخروج
        del request.session['guest_id']  # إزالة بيانات الجلسة الخاصة بالزائر
        return redirect('home')  # العودة إلى الصفحة الرئيسية


# الخروج من الغرفة للأعضاء
@login_required
def user_logout(request, slug):
    room = get_object_or_404(Room, slug=slug)
    customer = Customer.objects.get(user=request.user)
    room.customers.remove(customer)  # إزالة العضو من الغرفة
    return redirect('home')



def edit_style(request):
    customer = request.user.customer  # الحصول على العميل المرتبط بالمستخدم الحالي
    
    # محاولة جلب النمط الحالي للمستخدم أو إنشاء جديد إذا لم يكن موجودًا
    try:
        style = Style.objects.get(customer=customer)  # جلب النمط الحالي
    except Style.DoesNotExist:
        style = None  # إذا لم يكن هناك نمط، سيتم إنشاء واحد جديد

    if request.method == 'POST':
        form = StyleForm(request.POST, request.FILES, instance=style)  # تمرير النمط الحالي إذا كان موجودًا

        if form.is_valid():
            # حفظ النموذج مع التأكد من ربطه بالعميل
            style = form.save(commit=False)
            style.customer = customer  # ربط النمط بالمستخدم الحالي
            style.save()  # حفظ التغييرات
            # بعد الحفظ، إعادة التوجيه إلى صفحة الدردشة
            room_slug = request.GET.get('room_slug', '')  # جلب `slug` الغرفة من الـ URL
            if room_slug:
                return redirect('chatloop', slug=room_slug)  # إعادة التوجيه إلى صفحة الدردشة
            return redirect('home')  # إذا لم يكن هناك غرفة معينة، يتم توجيه المستخدم إلى الصفحة الرئيسية
    else:
        form = StyleForm(instance=style)  # تمرير النمط الحالي للنموذج

    return render(request, 'edit_style.html', {'form': form})



def edit_profile(request):
    try:
        customer = request.user.customer  # الحصول على العميل المرتبط بالمستخدم الحالي
    except Customer.DoesNotExist:
        raise Http404("Customer does not exist")

    if request.method == 'POST':
        form = CustomerProfileForm(request.POST, request.FILES, instance=customer)

        if form.is_valid():
            # التأكد من ربط العميل بـ user
            customer = form.save(commit=False)
            customer.user = request.user  # ربط العميل بالمستخدم الحالي
            customer.save()  # حفظ التغييرات
            # بعد الحفظ، إعادة التوجيه إلى صفحة الدردشة
            room_slug = request.GET.get('room_slug', '')  # جلب `slug` الغرفة من الـ URL
            if room_slug:
                return redirect('chatloop', slug=room_slug)  # إعادة التوجيه إلى صفحة الدردشة
            return redirect('home')  # إذا لم يكن هناك غرفة معينة، يتم توجيه المستخدم إلى الصفحة الرئيسية
    else:
        form = CustomerProfileForm(instance=customer)

    return render(request, 'edit_profile.html', {'form': form})


# إزالة @login_required من هنا إذا كنت لا ترغب في فرض تسجيل الدخول

@login_required
def send_message(request, user_id):
    # التأكد من وجود الـ Customer باستخدام user_id
    customer = request.user.customer  # استخدم customer من user

    # التأكد من أن الـ Customer لديه UserProfile
    try:
        liked_profile = UserProfile.objects.get(user__id=user_id)
    except UserProfile.DoesNotExist:
        return redirect('home')  # إعادة التوجيه إذا لم يكن يوجد UserProfile

    if request.method == "POST":
        content = request.POST.get("content")

        # إرسال الرسالة
        if request.user.is_authenticated:
            sender = request.user.customer  # استخدم customer بدلاً من أي شيء آخر
            # إرسال الرسالة
            DirectMessage.objects.create(
                sender=sender,
                receiver=liked_profile.user,  # استخدام الـ user المرتبط بـ UserProfile
                content=content,
            )
        else:
            # إذا كان الزائر
            guest = Guest.objects.filter(session_id=request.session.session_key).first()
            if guest:
                DirectMessage.objects.create(
                    guest_sender=guest,  # استخدم guest_sender بدلاً من guest
                    receiver=liked_profile.user,
                    content=content,
                )

        # إعادة توجيه المستخدم إلى صفحة الملف الشخصي للمستقبل
        return redirect('user_profile', user_id=user_id)

    return render(request, 'messages/send_message.html', {
        'liked_profile': liked_profile  # تمرير الملف الشخصي للمستخدم
    })




def user_profile(request, user_id):
    # التأكد من أن المستخدم مسجل وتحديد العميل المرتبط به
    if request.user.is_authenticated:
        customer = request.user.customer  # هذا يعني أن المستخدم مسجل ولديه Customer مرتبط به
    else:
        customer = None  # إذا كان المستخدم غير مسجل

    # الحصول على الملف الشخصي للمستخدم المعين باستخدام الـ customer بدلاً من user
    try:
        # البحث عن الملف الشخصي باستخدام معرف الـ Customer
        liked_profile = UserProfile.objects.get(user__id=user_id)  # المستخدم من نوع Customer
    except UserProfile.DoesNotExist:
        return redirect('home')  # إذا لم يتم العثور على الـ UserProfile

    # جلب الرسائل بين المستخدم الحالي والمستخدم المعين
    if customer:  # إذا كان المستخدم مسجلًا
        direct_messages = DirectMessage.objects.filter(
            sender=customer, receiver=liked_profile.user
        ) | DirectMessage.objects.filter(
            sender=liked_profile.user, receiver=customer
        )
        direct_messages = direct_messages.order_by('-created_at')

        # جلب الإشعارات الخاصة بالمستخدم
        notifications = PrivateMessageNotification.objects.filter(customer=request.user.customer, is_read=False)
    else:
        direct_messages = []  # إذا كان المستخدم غير مسجل
        notifications = []

    if request.method == 'POST' and 'like_profile' in request.POST:
        if customer:  # إذا كان المستخدم مسجلًا
            like_exists = ProfileLike.objects.filter(user=customer, liked_profile=liked_profile).exists()
            if like_exists:
                ProfileLike.objects.filter(user=customer, liked_profile=liked_profile).delete()
            else:
                ProfileLike.objects.create(user=customer, liked_profile=liked_profile)
        else:
            guest = Guest.objects.filter(session_id=request.session.session_key).first()
            if guest:
                like_exists = ProfileLike.objects.filter(guest=guest, liked_profile=liked_profile).exists()
                if like_exists:
                    ProfileLike.objects.filter(guest=guest, liked_profile=liked_profile).delete()
                else:
                    ProfileLike.objects.create(guest=guest, liked_profile=liked_profile)

        return redirect('user_profile', user_id=user_id)

    return render(request, 'user_profile.html', {
        'liked_profile': liked_profile,
        'is_liked': ProfileLike.objects.filter(user=customer, liked_profile=liked_profile).exists() if customer else
                    ProfileLike.objects.filter(guest__session_id=request.session.session_key, liked_profile=liked_profile).exists() if request.session.session_key else False,
        'direct_messages': direct_messages,  # إرسال الرسائل الخاصة إلى القالب
        'notifications': notifications,  # إرسال الإشعارات إلى القالب
    })




@login_required
def mark_notification_as_read(request, notification_id):
    notification = get_object_or_404(PrivateMessageNotification, id=notification_id)

    if notification.customer == request.user.customer:
        notification.is_read = True
        notification.save()

    return redirect('user_profile', user_id=request.user.id)







    <a href="{% url 'remove_member_from_room' slug=room.slug member_id=member.id %}" 
                                class="text-danger" onclick="return confirm('هل أنت متأكد أنك تريد طرد هذا العضو؟');">
                                 طرد
                             </a>










   <ul>
            {% for member in members %}
                {% if member != request.user %}
                    <!-- إذا كان العضو ليس هو المستخدم الحالي -->
                    {% if request.user.is_superuser %}
                        <!-- إذا كان المستخدم مسؤولًا (superuser)، يتم عرض جميع الأعضاء بما فيهم الشبح والمخفي -->
                        <li class="d-flex justify-content-between py-2 grid-gap gap-3 border-bottom">
                            {% if member.avatar %}
                                <img src="{{ member.avatar.url }}" alt="Avatar" width="40" class="rounded-circle">
                            {% else %}
                                <img src="default-avatar.png" alt="Default Avatar" width="40" class="rounded-circle">
                            {% endif %}
                            <div class="d-flex justify-content-between w-100">
                                <a href="{% url 'user_profile' user_id=member.id %}" 
                                   style="font-family: {{ style.font_family }}; font-size: {{ style.font_size }}px; color: {{ style.font_color }};">
                                    <span class="name">{{ member.user.username }}</span>
                                </a>
                                <a href="{% url 'remove_member_from_room' slug=room.slug member_id=member.id %}" 
                                class="text-danger" onclick="return confirm('هل أنت متأكد أنك تريد طرد هذا العضو؟');">
                                 طرد
                             </a>
                            </div>
                        </li>
                    {% else %}
                        <!-- إذا لم يكن المستخدم مسؤولًا، يتم تطبيق الفلاتر الأخرى -->
                        {% if not member.is_ghost %}
                            <!-- إذا كان العضو ليس شبحًا -->
                            {% if not member.is_hidden %}
                                <!-- إذا كان العضو ليس مخفيًا -->
                                <li class="d-flex justify-content-between py-2 grid-gap gap-3 border-bottom">
                                    {% if member.avatar %}
                                        <img src="{{ member.avatar.url }}" alt="Avatar" width="40" class="rounded-circle">
                                    {% else %}
                                        <img src="default-avatar.png" alt="Default Avatar" width="40" class="rounded-circle">
                                    {% endif %}
                                    <div class="d-flex justify-content-between w-100">
                                        <a href="{% url 'user_profile' user_id=member.id %}" 
                                           style="font-family: {{ style.font_family }}; font-size: {{ style.font_size }}px; color: {{ style.font_color }};">
                                            <span class="name">{{ member.user.username }}</span>
                                        </a>
                                    </div>
                                </li>
                            {% endif %}
                        {% elif member.is_hidden and can_see_hidden %}
                            <!-- إذا كان العضو مخفيًا وكان المستخدم لديه صلاحية لرؤيته -->
                            {% if not member.is_ghost %}
                                <li class="d-flex justify-content-between py-2 grid-gap gap-3 border-bottom">
                                    {% if member.avatar %}
                                        <img src="{{ member.avatar.url }}" alt="Avatar" width="40" class="rounded-circle">
                                    {% else %}
                                        <img src="default-avatar.png" alt="Default Avatar" width="40" class="rounded-circle">
                                    {% endif %}
                                    <div class="d-flex justify-content-between w-100">
                                        <a href="{% url 'user_profile' user_id=member.id %}" 
                                           style="font-family: {{ style.font_family }}; font-size: {{ style.font_size }}px; color: {{ style.font_color }};">
                                            <span class="name">{{ member.user.username }}</span>
                                        </a>
                                    </div>
                                </li>
                            {% endif %}
                        {% elif member.is_ghost and can_see_ghost %}
                            <!-- إذا كان العضو شبحًا وكان المستخدم لديه صلاحية لرؤيته -->
                            <li class="d-flex justify-content-between py-2 grid-gap gap-3 border-bottom">
                                {% if member.avatar %}
                                    <img src="{{ member.avatar.url }}" alt="Avatar" width="40" class="rounded-circle">
                                {% else %}
                                    <img src="default-avatar.png" alt="Default Avatar" width="40" class="rounded-circle">
                                {% endif %}
                                <div class="d-flex justify-content-between w-100">
                                    <a href="{% url 'user_profile' user_id=member.id %}" 
                                       style="font-family: {{ style.font_family }}; font-size: {{ style.font_size }}px; color: {{ style.font_color }};">
                                        <span class="name">{{ member.user.username }}</span>
                                    </a>
                                </div>
                            </li>
                        {% endif %}
                    {% endif %}
                {% endif %}
            {% empty %}
                <li>لا يوجد أعضاء في هذه الغرفة.</li>
            {% endfor %}
        </ul>


















def chatloop(request, slug):
    room = get_object_or_404(Room, slug=slug)
    emojis = Emoji.objects.all()  # جلب جميع الرموز التعبيرية
    style = None
    can_see_hidden = False  # الافتراضي أن المستخدم لا يستطيع رؤية الأعضاء المخفيين
    can_see_ghost = False  # الافتراضي أن المستخدم لا يستطيع رؤية الأعضاء الشبح
    
    if request.user.is_authenticated:
        try:
            customer = request.user.customer
            style = Style.objects.get(customer=customer)
            user_profile = getattr(customer, 'userprofile', None)  # الحصول على كائن UserProfile المرتبط بـ Customer
            if user_profile:
               can_see_hidden = user_profile.can_see_hidden  # تحديد ما إذا كان المستخدم يستطيع رؤية الأعضاء المخفيين
               can_see_ghost = user_profile.can_see_ghost  # تحديد ما إذا كان المستخدم يستطيع رؤية الأعضاء الشبح
        except Style.DoesNotExist:
            pass

    # جلب جميع الرسائل الخاصة بالغرفة مرتبة
    messages_list = Message.objects.filter(room=room).order_by('-created_at')[:10]
    
    # تحقق إذا كان المستخدم زائرًا
    guest = None
    if request.session.get('guest_id'):
        try:
            guest = Guest.objects.get(id=request.session['guest_id'])
        except Guest.DoesNotExist:
            del request.session['guest_id']  # حذف guest_id من الجلسة
            guest = None
            messages.error(request, 'تم طرد الزائر من الغرفة، لم يعد موجودًا.')  # عرض رسالة خطأ
            return redirect('home')  # إعادة التوجيه إلى الصفحة الرئيسية

    # تحقق إذا كان المستخدم عضوًا
    customer = None
    if request.user.is_authenticated:
        customer = Customer.objects.get(user=request.user)

    # إضافة رسالة جديدة
    if request.method == 'POST':
        content = request.POST.get('content')
        image = request.FILES.get('image')
        emoji_id = request.POST.get('emoji', '')

        emoji = None
        if emoji_id:
            emoji = Emoji.objects.get(id=emoji_id)

        if request.user.is_authenticated:
            customer = Customer.objects.get(user=request.user)
            message = Message.objects.create(
                room=room,
                customer=customer,
                content=content,
                image=image,
                emoji=emoji
            )
        elif guest:
            message = Message.objects.create(
                room=room,
                guest=guest,
                content=content,
                image=image,
                emoji=emoji
            )

        return redirect('chatloop', slug=slug)

    # منطق الطرد
    if 'kick_user' in request.POST:
        user_to_kick = request.POST.get('kick_user')
        if user_to_kick:
            if request.user.is_authenticated and request.user.customer.is_admin:
                customer_to_kick = Customer.objects.get(id=user_to_kick)
                room.customers.remove(customer_to_kick)  # طرد العضو من الغرفة
                messages.success(request, f'تم طرد {customer_to_kick.user.username} من الغرفة!')
                
                # قم بتسجيل الخروج إذا كان العميل هو العميل الذي تم طرده (اختياري)
                if request.user == customer_to_kick.user:
                    # تسجيل خروج العميل
                    from django.contrib.auth import logout
                    logout(request)  # تسجيل الخروج
                    messages.success(request, 'تم تسجيل خروجك بعد طردك من الغرفة.')  # رسالة تأكيد

                # إعادة توجيه المستخدم إلى الصفحة الرئيسية بعد الطرد
                return redirect('home')  # إعادة التوجيه إلى الصفحة الرئيسية بعد الطرد

            elif guest:
                room.guests.remove(guest)  # طرد الزائر من الغرفة
                del request.session['guest_id']  # حذف الـ guest_id من الجلسة
                messages.success(request, 'تم طرد الزائر من الغرفة!')
                
                # إعادة التوجيه إلى الصفحة الرئيسية بعد طرد الزائر
                return redirect('home')  # إعادة التوجيه إلى الصفحة الرئيسية بعد الطرد
        else:
            messages.error(request, 'المستخدم غير موجود.')
            return redirect('chatloop', slug=slug)

    # جلب الأعضاء والزوار في الغرفة
    members = room.customers.all()
    guests = room.guests.all()

    # تحقق إذا كان المستخدم قد تم طرده
    if customer and customer not in room.customers.all():
        messages.error(request, 'تم طردك من الغرفة.')  # عرض رسالة أنه تم طرده
        return redirect('home')  # إعادة توجيه العميل إلى الصفحة الرئيسية بعد الطرد

    return render(request, 'chatloop.html', {
        'room': room, 
        'members': members, 
        'guests': guests,
        'guest': guest, 
        'customer': customer,
        'messages': messages_list,
        'emojis': emojis,
        'style': style,
        'can_see_hidden': can_see_hidden,
        'can_see_ghost': can_see_ghost,
    })



















دي المعدله 

def chatloop(request, slug):
    room = get_object_or_404(Room, slug=slug)
    
    emojis = Emoji.objects.all()  # جلب جميع الرموز التعبيرية
    style = None
    can_see_hidden = False  # الافتراضي أن المستخدم لا يستطيع رؤية الأعضاء المخفيين
    can_see_ghost = False  # الافتراضي أن المستخدم لا يستطيع رؤية الأعضاء الشبح
    customer = None
    guest = None
    visible_members = []

    if request.user.is_authenticated:
        try:
            customer = request.user.customer
            style = Style.objects.get(customer=customer)
        except Style.DoesNotExist:
            pass

    # جلب بيانات المستخدم
    user_profile = UserProfile.objects.get(user=request.user.customer)  # تأكد من استخدام customer هنا
    can_see_hidden = user_profile.can_see_hidden
    can_see_ghost = user_profile.can_see_ghost

    # طباعة الأعضاء في الغرفة بدون تصفية الصلاحيات
    all_members = room.customers.all()  # عرض جميع الأعضاء في الغرفة
    print("All members in the room:", all_members)

    # إضافة طباعة تفصيلية لكل عضو لفحص صلاحياته
    for member in all_members:
        print(f"Member: {member.user.username}, is_ghost: {member.is_ghost}, is_hidden: {member.is_hidden}, is_admin: {member.is_admin}")

    # إذا كان المستخدم مشرفًا، نعرض جميع الأعضاء في الغرفة
    if request.user.is_superuser:
        visible_members = all_members  # عرض جميع الأعضاء
    else:
        # تصفية الأعضاء بناءً على صلاحيات الرؤية
        visible_members = all_members.filter(
            Q(is_ghost=False, is_hidden=False) |  # الأعضاء العاديين
            Q(is_ghost=True, userprofile__can_see_ghost=True) |  # الأشباح مع صلاحية رؤية الأشباح
            Q(is_hidden=True, userprofile__can_see_hidden=True)  # الأعضاء المخفيين مع صلاحية رؤية المخفيين
        )

        # تصفية المسؤولين بحيث يظهرون فقط لبعضهم البعض
        if not request.user.is_superuser:  # إذا لم يكن المستخدم مشرفًا
            visible_members = visible_members.exclude(is_admin=True)  # لا يظهر المسؤولون للمستخدمين العاديين

    # طباعة الأعضاء الذين سيتم عرضهم
    print("Visible members:", visible_members)

    # جلب جميع الرسائل الخاصة بالغرفة مرتبة
    messages_list = Message.objects.filter(room=room).order_by('-created_at')[:10]
    
    # تحقق إذا كان المستخدم زائرًا
    guest = None
    if request.session.get('guest_id'):
        try:
            guest = Guest.objects.get(id=request.session['guest_id'])
        except Guest.DoesNotExist:
            del request.session['guest_id']  # حذف guest_id من الجلسة
            guest = None
            messages.error(request, 'تم طرد الزائر من الغرفة، لم يعد موجودًا.')  # عرض رسالة خطأ
            return redirect('home')  # إعادة التوجيه إلى الصفحة الرئيسية

    # تحقق إذا كان المستخدم عضوًا
    customer = None
    if request.user.is_authenticated:
        customer = Customer.objects.get(user=request.user)

    # إضافة رسالة جديدة
    if request.method == 'POST':
        content = request.POST.get('content')
        image = request.FILES.get('image')
        emoji_id = request.POST.get('emoji', '')

        emoji = None
        if emoji_id:
            emoji = Emoji.objects.get(id=emoji_id)

        if request.user.is_authenticated:
            customer = Customer.objects.get(user=request.user)
            message = Message.objects.create(
                room=room,
                customer=customer,
                content=content,
                image=image,
                emoji=emoji
            )
        elif guest:
            message = Message.objects.create(
                room=room,
                guest=guest,
                content=content,
                image=image,
                emoji=emoji
            )

        return redirect('chatloop', slug=slug)

    # جلب الأعضاء والزوار في الغرفة
    guests = room.guests.all()
    
    # تحقق إذا كان المستخدم قد تم طرده
    if customer and customer not in room.customers.all():
        messages.error(request, 'تم طردك من الغرفة.')  # عرض رسالة أنه تم طرده
        return redirect('home')  # إعادة توجيه العميل إلى الصفحة الرئيسية بعد الطرد

    return render(request, 'chatloop.html', {
        'room': room, 
        'members': visible_members, 
        'guests': guests,
        'guest': guest, 
        'customer': customer,
        'messages': messages_list,
        'emojis': emojis,
        'style': style,
        'can_see_hidden': can_see_hidden,
        'can_see_ghost': can_see_ghost,
        'customer': customer
    })
